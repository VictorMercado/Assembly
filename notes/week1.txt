A program is a collection of source files. 
We will be using:
-ASM : x86 = 1980 was first 16 bit
            -in 2005 64 bit processor was made

-Bash
-C++
-C

extern to bring in functions from external libraries

segments:
.text   ; is for the code
.bss    ; uninitialized data
.data   ; is for initializing constants

commands: 
s = scalar = 1 number
p = packed = multiple numbers
d = 64 bits
loop
mov
movsd       ; move       
push        ; push onto the stack
pop         ; pop from the stack
call        ; call functions
db          ; define data using bytes
edu
add         ; add 2 ints
addsd       ; add 2 floats
sub         ; subtract 2 ints
subsd       ; subtrack 2 floats
dec         ; decrement int by 1
inc         ; increment int by 1
mul         ; multiply 2 ints
mulsd       ; multiply 2 floats
div         ; divide 2 ints
divsd       ; divide 2 floats
sqrt        ; square root a number
sqrtsd      ; square root a scalar double number
xchg
ret
neg
cmp [reg/mem], [reg/mem/imm]: compares op1 to op2 sets flag
jmp [reg/mem/label+offset]: jumps to label defined by a name and color Here:
jxx : [label+offset]
je  : jump equal
jl  : jump if less
jle : jump if less or equal
jg  : jump if greater
jge : jump if greater or equal
jz  : jump if 0
jnz : jump if not 0
ja  : compare > with op1 op2 for unsigned numbers
jb  : compare < with op1 op2 for unsigned numbers


Registers:

r registers are 64 bit

rax 3 uses:
- return register
- throw junk away with pop
- takes codes to certain purposes
    mov 0 for no write
    mov 1 for floating point write

rdi = 1st parameter, index register
rsi = 2nd parameter, index register
rsp = stack pointer 
rbp = base pointer 
rip = 

General Purpose:
use these for passing into functions:
rdx = 3rd parameter
rcx = 4th parameter,
rbx
r8 = 5th parameter
r9 = 6th parameter

r10 = interger register
r11 = interger register
r12 = interger register
r13 = interger register
r14 = interger register
r15 = interger register

Parameter Passing:
rdi, rsi, rdx, rcx, r8, r9

floating point registers
xmm0, xmm2, xmm3, ... , xmm15

volatile
xmm0-xmm7

stable
xmm8-xmm15

xmm0 = 1st parameter
xmm1 = 2nd parameter
xmm2 = 3rd parameter
xmm3 = 4th prameter

data
d = define
b = bytes           (1 byte)    (8 bits)
w = words           (2 bytes)   (16 bits)
d = double words    (4 bytes)   (32 bits)
q = quadwords       (8 bytes)   (64 bits)

Compiling 

Hybrid Program:
    -driver is cpp main function
    -the asm file contains a function that will call these cpp functions:
        - scanf
        - printf
        -atof
    the asm file will also call another asm function from a different file:
        -isfloat

Structure of a assembly function
    - introductory comments (name, email address)


Standard for parameters

douvle fun(int, int, long)
    rdi

Questions:
    What are registers?
    How do arugments get passed into functions? Stack?
        - 
    Why do we need to place sys_exit code (60) in rax register to exit program?
    Why do we need to place 0 into rdi register to exit program? 