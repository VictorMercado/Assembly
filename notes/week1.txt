A program is a collection of source files. 
We will be using:
-ASM : x86 = 1980 was first 16 bit
            -in 2005 64 bit processor was made

-Bash
-C++
-C

extern to bring in functions from external libraries

segments:
.text   ; is for the code
.bss    ; is for allocating dynamic variables
.data   ; is for initializing constants


Registers:

rax 3 uses:
- return register
- throw junk away with pop
- takes codes to certain purposes
    mov 0 for no write
    mov 1 for floating point write

rsi 
rdi 
rsp = stack pointer 
rbp = base pointer 

General Purpose:
use these for passing into functions:
rbx 
rcx
rdx
r8
r9

r10
r11
r12
r13
r14
r15

Parameter Passing:
rdi, rsi, rdx, rcx, r8, r9

floating point registers
xmm0, xmm2, xmm3, ... , xmm15

volatile
xmm0-xmm7

stable
xmm8-xmm15


data
d = define
b = bytes           (1 byte)    (8 bits)
w = words           (2 bytes)   (16 bits)
d = double words    (4 bytes)   (32 bits)
q = quadwords       (8 bytes)   (64 bits)

Compiling 

Hybrid Program:
    -driver is cpp main function
    -the asm file contains a function that will call these cpp functions:
        - scanf
        - printf
        -atof
    the asm file will also call another asm function from a different file:
        -isfloat

Structure of a assembly function
    - introductory comments (name, email address)


Standard for parameters

douvle fun(int, int, long)
    rdi

Questions:
    What are registers?
    How do arugments get passed into functions? Stack?
        - 
    Why do we need to place sys_exit code (60) in rax register to exit program?
    Why do we need to place 0 into rdi register to exit program? 