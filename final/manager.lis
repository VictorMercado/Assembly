     1                                  global resistance
     2                                  
     3                                  extern printf
     4                                  extern scanf
     5                                  extern getResistance
     6                                  ; extern loadArray
     7                                  
     8                                  
     9                                  
    10                                  segment .data
    11 00000000 256600                  single_float_format db "%f", 0
    12                                  
    13 00000003 456E74657220746865-     inputprompt db "Enter the resistance numbers of the two subcircuits separated by ws and press enter: ",0
    13 0000000C 20726573697374616E-
    13 00000015 6365206E756D626572-
    13 0000001E 73206F662074686520-
    13 00000027 74776F207375626369-
    13 00000030 726375697473207365-
    13 00000039 706172617465642062-
    13 00000042 7920777320616E6420-
    13 0000004B 707265737320656E74-
    13 00000054 65723A2000         
    14                                  
    15 00000059 256C66256C66256C66-     three_float_format db "%lf%lf%lf",0
    15 00000062 00                 
    16                                  
    17 00000063 546865736520726573-     outputResistances db "These resistances were received: %.15lf 立, %.15lf 立, %.15lf 立.",10,0
    17 0000006C 697374616E63657320-
    17 00000075 776572652072656365-
    17 0000007E 697665643A20252E31-
    17 00000087 356C6620CEA92C2025-
    17 00000090 2E31356C6620CEA92C-
    17 00000099 20252E31356C6620CE-
    17 000000A2 A92E0A00           
    18 000000A6 546865207265736973-     outputTotalR db "The resistance of the entire circuit is %.15lf 立.", 10, 0
    18 000000AF 74616E6365206F6620-
    18 000000B8 74686520656E746972-
    18 000000C1 652063697263756974-
    18 000000CA 20697320252E31356C-
    18 000000D3 6620CEA92E0A00     
    19                                  
    20 000000DA 54686520746F74616C-     goodbye db "The total resistance will be returned to the caller module.",10,0
    20 000000E3 20726573697374616E-
    20 000000EC 63652077696C6C2062-
    20 000000F5 652072657475726E65-
    20 000000FE 6420746F2074686520-
    20 00000107 63616C6C6572206D6F-
    20 00000110 64756C652E0A00     
    21                                  
    22                                  
    23                                  
    24 00000117 456E74657220726573-     enterResistance1 db "Enter resistance on circuit 1: ", 0
    24 00000120 697374616E6365206F-
    24 00000129 6E2063697263756974-
    24 00000132 20313A2000         
    25                                  enterResistanceLen equ $ - enterResistance1
    26                                  
    27 00000137 456E74657220726573-     enterResistance2 db "Enter resistance on circuit 2: ", 0
    27 00000140 697374616E6365206F-
    27 00000149 6E2063697263756974-
    27 00000152 20323A2000         
    28                                  enterResistanceLen2 equ $ - enterResistance2
    29                                  
    30 00000157 456E74657220726573-     enterResistance3 db "Enter resistance on circuit 3: ", 0
    30 00000160 697374616E6365206F-
    30 00000169 6E2063697263756974-
    30 00000172 20333A2000         
    31                                  enterResistanceLen3 equ $ - enterResistance3
    32                                  
    33                                  
    34                                  
    35 00000177 686572656565656565-     msg db "hereeeeeeeeeeeeeeeeeeeeeeeeeee:",10, 0
    35 00000180 656565656565656565-
    35 00000189 656565656565656565-
    35 00000192 6565653A0A00       
    36                                  msgLen equ $ - msg
    37                                  
    38                                  ; one dq 1.0
    39                                  
    40                                  segment .bss
    41 00000000 <res 00000020>          array resq 4
    42                                  
    43                                  segment .text
    44                                  
    45                                  resistance:
    46                                  
    47                                  
    48                                  ;=========begin inputs for the 3 resistances===================
    49                                  
    50 00000000 50                      push rax
    51 00000001 B800000000              mov rax, 0
    52 00000006 48BF-                   mov rdi, msg
    52 00000008 [7701000000000000] 
    53 00000010 BE21000000              mov rsi, msgLen
    54 00000015 E8(00000000)            call printf
    55 0000001A 58                      pop rax
    56                                  
    57                                  ; push rax
    58                                  ; mov rax, 0
    59                                  ; mov rdi, single_float_format
    60                                  ; mov rsi, array
    61                                  ; call scanf
    62                                  ; pop rax
    63                                  
    64                                  ; push qword 0
    65                                  ; ;Display a prompt message asking for the inputs
    66                                  ; mov rax, 0
    67                                  ; mov rdi, inputprompt         ;"Enter the resistance numbers of the two subcircuits separated by ws and press enter: "
    68                                  ; call printf
    69                                  ; pop rax
    70                                  
    71                                  
    72                                  
    73                                  
    74 0000001B 6A00                    push qword 0
    75 0000001D B800000000              mov rax, 0
    76 00000022 48BF-                   mov rdi, enterResistance1
    76 00000024 [1701000000000000] 
    77 0000002C BE20000000              mov rsi, enterResistanceLen
    78 00000031 E8(00000000)            call printf
    79 00000036 58                      pop rax
    80                                  
    81                                  
    82 00000037 6A00                    push qword 0
    83 00000039 B800000000              mov rax, 0
    84 0000003E 48BF-                   mov rdi, single_float_format
    84 00000040 [0000000000000000] 
    85 00000048 48BE-                   mov rsi, array
    85 0000004A [0000000000000000] 
    86 00000052 E8(00000000)            call scanf
    87 00000057 58                      pop rax
    88                                  
    89 00000058 50                      push rax
    90 00000059 B800000000              mov rax, 0
    91 0000005E 48BF-                   mov rdi, msg
    91 00000060 [7701000000000000] 
    92 00000068 BE21000000              mov rsi, msgLen
    93 0000006D E8(00000000)            call printf
    94 00000072 58                      pop rax
    95                                  
    96                                  ; mov rax,0
    97                                  ; mov rdi, enterResistance2
    98                                  ; mov rsi, enterResistanceLen2
    99                                  ; call printf
   100                                  
   101                                  ; push qword 0
   102                                  ; mov rax, 0
   103                                  ; mov rdi, single_float_format
   104                                  ; mov rsi, [r8 + 8]
   105                                  ; call scanf
   106                                  ; pop rax
   107                                  
   108                                  ; mov rax,0
   109                                  ; mov rdi, enterResistance3
   110                                  ; mov rsi, enterResistanceLen3
   111                                  ; call printf
   112                                  
   113                                  ; push qword 0
   114                                  ; mov rax, 0
   115                                  ; mov rdi, single_float_format
   116                                  ; mov rsi, [r8 + 16]
   117                                  ; call scanf
   118                                  ; pop rax
   119                                  
   120                                  
   121                                  
   122                                  
   123                                  ; void loadArray(array)
   124                                  ; push rax
   125                                  ; mov rax, 0
   126                                  ; mov rdi, array
   127                                  ; call loadArray
   128                                  ; pop rax
   129                                  
   130                                  ;Input the 3 resistances
   131                                  ; push qword -1
   132                                  ; push qword -2
   133                                  ; push qword -3
   134                                  ; mov rax, 0
   135                                  ; mov rdi, three_float_format
   136                                  ; mov rsi, array
   137                                  ; mov rdx, array
   138                                  ; add rdx, 8
   139                                  ; mov rcx, array
   140                                  ; add rcx, 16
   141                                  ; call scanf
   142                                  ; ; movsd xmm5, [rsp]
   143                                  ; ; movsd xmm6, [rsp + 8]
   144                                  ; ; movsd xmm7, [rsp + 16]
   145                                  ; pop rax
   146                                  ; pop rax
   147                                  ; pop rax
   148                                  ; for int i = 0, i < 3, i++
   149                                  ; =============End input of 3 resistances===========
   150                                  
   151                                  ; ========== output the 3 resistances received =======
   152                                  
   153                                  
   154                                  
   155                                  
   156                                  
   157                                  
   158                                  
   159                                  
   160                                  
   161                                  
   162                                  ; push qword 0
   163                                  ; mov rax, 3
   164                                  ; mov rdi, outputResistances        ;"These resistances were received %.15lf, %.15lf, %.15lf..."
   165                                  ; movsd xmm0, [array]
   166                                  ; movsd xmm1, [array + 8]
   167                                  ; movsd xmm2, [array + 16]
   168                                  ; call printf
   169                                  ; pop rax
   170                                  
   171                                  ; double getResistance(array) -> xmm0
   172                                  
   173                                  
   174                                  
   175                                  ; mov rdi, array
   176                                  ; call getResistance
   177                                  ; movsd xmm11, xmm0
   178                                  
   179                                  
   180                                  
   181                                  
   182                                  
   183                                  
   184                                  ; ===========End output of 3 resistances==========
   185                                  
   186                                  ; =====Time to calculate the total resistance=======
   187                                  ; 1/r = 1/R1 + 1/R2 + 1/R3
   188                                  ; r = 1/(1/R1 + 1/R2 + 1/R3)
   189                                  ; first we need to add the resistances (each divided by 1.0)
   190                                  ; one declared in segment.data
   191                                  ; movsd xmm8, [one]
   192                                  ; movsd xmm9, [one]
   193                                  ; movsd xmm10, [one]
   194                                  ; ; doing 1/R1, 1/R2, 1/R3 and adding them, registers xmm5-7 contain our resistances
   195                                  ; divsd xmm8, xmm5
   196                                  ; divsd xmm9, xmm6
   197                                  ; divsd xmm10, xmm7
   198                                  ; ; adding them together, total will now be stored in xmm8
   199                                  ; addsd xmm8, xmm9
   200                                  ; addsd xmm8, xmm10
   201                                  ; ; doing 1/rTotal (stored in xmm11)
   202                                  ; movsd xmm11, [one]
   203                                  ; divsd xmm11, xmm8
   204                                  ; ============End of calculations==============
   205                                  
   206                                  ; ; =========== Output total resistance ===========
   207                                  ; push qword 0
   208                                  ; mov rax, 1
   209                                  ; mov rdi, outputTotalR
   210                                  ; movsd xmm0, xmm11
   211                                  ; call printf
   212                                  ; pop rax
   213                                  ; ; ========== end output total resistance =========
   214                                  
   215                                  ; ; =========== goodbyes ===============
   216                                  ; push qword 0
   217                                  ; mov rax, 0
   218                                  ; mov rdi, goodbye
   219                                  ; call printf
   220                                  ; pop rax
   221                                  ; ; =========== really goodbye now ============
   222                                  
   223                                  ; pop rax     ;counteract push at beginning of code
   224                                  
   225                                  ; movsd xmm0, xmm11
   226                                  ;===== Restore original values to integer registers ===================================================================
