     1                                  global loadArray
     2                                  
     3                                  extern scanf
     4                                  extern printf
     5                                  
     6                                  
     7                                  
     8                                  segment .data
     9 00000000 256600                  single_float_format db "%f", 0
    10                                  
    11 00000003 456E74657220726573-     enterResistance1 db "Enter resistance on circuit 1: ", 0
    11 0000000C 697374616E6365206F-
    11 00000015 6E2063697263756974-
    11 0000001E 20313A2000         
    12                                  enterResistanceLen equ $ - enterResistance1
    13                                  
    14 00000023 456E74657220726573-     enterResistance2 db "Enter resistance on circuit 2: ", 0
    14 0000002C 697374616E6365206F-
    14 00000035 6E2063697263756974-
    14 0000003E 20323A2000         
    15                                  enterResistanceLen2 equ $ - enterResistance2
    16                                  
    17 00000043 456E74657220726573-     enterResistance3 db "Enter resistance on circuit 3: ", 0
    17 0000004C 697374616E6365206F-
    17 00000055 6E2063697263756974-
    17 0000005E 20333A2000         
    18                                  enterResistanceLen3 equ $ - enterResistance3
    19                                  
    20                                  
    21 00000063 686572653A00            msg db "here:", 0
    22                                  msgLen equ $ - msg
    23                                  
    24                                  segment .bss
    25                                  ; array resq 3
    26                                  
    27                                  segment .text
    28                                  
    29                                  loadArray:
    30                                  ;Prolog ===== Insurance for any caller of this assembly module ========================================================
    31                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    32 00000000 55                      push rbp
    33 00000001 4889E5                  mov rbp, rsp
    34 00000004 53                      push rbx
    35 00000005 51                      push rcx
    36 00000006 52                      push rdx
    37 00000007 57                      push rdi
    38 00000008 56                      push rsi
    39 00000009 4150                    push r8
    40 0000000B 4151                    push r9
    41 0000000D 4152                    push r10
    42 0000000F 4153                    push r11
    43 00000011 4154                    push r12
    44 00000013 4155                    push r13
    45 00000015 4156                    push r14
    46 00000017 4157                    push r15
    47 00000019 9C                      pushf 
    48                                  
    49                                  
    50                                  ; for int i = 0, i < 3, i++
    51                                  ;   array[i] = scanf()
    52                                  ;   scanf(single_float_format, array[i])
    53                                  ;                 %.15lf ,  i want to place here
    54                                  ; mov r15, 0
    55 0000001A 6A00                    push qword 0
    56 0000001C 4989FF                  mov r15, rdi
    57                                  
    58                                  
    59 0000001F 6A00                    push qword 0
    60 00000021 B800000000              mov rax, 0
    61 00000026 48BF-                   mov rdi, enterResistance1
    61 00000028 [0300000000000000] 
    62 00000030 BE20000000              mov rsi, enterResistanceLen
    63 00000035 E8(00000000)            call printf
    64 0000003A 58                      pop rax
    65                                  
    66                                  
    67 0000003B 6A00                    push qword 0
    68 0000003D B800000000              mov rax, 0
    69 00000042 48BF-                   mov rdi, single_float_format
    69 00000044 [0000000000000000] 
    70 0000004C 4C89FE                  mov rsi, r15
    71 0000004F E8(00000000)            call scanf
    72 00000054 58                      pop rax
    73                                  
    74 00000055 50                      push rax
    75 00000056 B800000000              mov rax, 0
    76 0000005B 48BF-                   mov rdi, msg
    76 0000005D [6300000000000000] 
    77 00000065 BE06000000              mov rsi, msgLen
    78 0000006A E8(00000000)            call printf
    79 0000006F 58                      pop rax
    80                                  
    81 00000070 B800000000              mov rax,0
    82 00000075 48BF-                   mov rdi, enterResistance2
    82 00000077 [2300000000000000] 
    83 0000007F BE20000000              mov rsi, enterResistanceLen2
    84 00000084 E8(00000000)            call printf
    85                                  
    86 00000089 6A00                    push qword 0
    87 0000008B B800000000              mov rax, 0
    88 00000090 48BF-                   mov rdi, single_float_format
    88 00000092 [0000000000000000] 
    89 0000009A 498B7008                mov rsi, [r8 + 8]
    90 0000009E E8(00000000)            call scanf
    91 000000A3 58                      pop rax
    92                                  
    93 000000A4 B800000000              mov rax,0
    94 000000A9 48BF-                   mov rdi, enterResistance3
    94 000000AB [4300000000000000] 
    95 000000B3 BE20000000              mov rsi, enterResistanceLen3
    96 000000B8 E8(00000000)            call printf
    97                                  
    98 000000BD 6A00                    push qword 0
    99 000000BF B800000000              mov rax, 0
   100 000000C4 48BF-                   mov rdi, single_float_format
   100 000000C6 [0000000000000000] 
   101 000000CE 498B7010                mov rsi, [r8 + 16]
   102 000000D2 E8(00000000)            call scanf
   103 000000D7 58                      pop rax
   104                                  
   105                                  
   106 000000D8 58                      pop rax
   107                                  ; beginLoop:
   108                                  ;     cmp r15, 3
   109                                  ;     je endLoop
   110                                  
   111                                  ;     push qword 0
   112                                  ;     mov rax, 0
   113                                  ;     mov rdi, single_float_format
   114                                  ;     mov rsi, [r8 + 8*r15];array[i]
   115                                  ;     call scanf
   116                                  ;     inc r15
   117                                  ;     pop rax
   118                                  ;     ; when r15 == 3
   119                                  
   120                                      
   121                                  ;     jmp beginLoop
   122                                  ; endLoop:
   123                                  ; push qword -1
   124                                  ; push qword -2
   125                                  ; push qword -3
   126                                  ; mov rax, 0
   127                                  ; mov rdi, three_float_format
   128                                  ; mov rsi, array
   129                                  ; mov rdx, array
   130                                  ; add rdx, 8
   131                                  ; mov rcx, array
   132                                  ; add rcx, 16
   133                                  ; call scanf
   134                                  ; ; movsd xmm5, [rsp]
   135                                  ; ; movsd xmm6, [rsp + 8]
   136                                  ; ; movsd xmm7, [rsp + 16]
   137                                  ; pop rax
   138                                  ; pop rax
   139                                  ; pop rax
   140                                  
   141 000000D9 9D                      popf
   142 000000DA 415F                    pop r15
   143 000000DC 415E                    pop r14
   144 000000DE 415D                    pop r13
   145 000000E0 415C                    pop r12
   146 000000E2 415B                    pop r11
   147 000000E4 415A                    pop r10
   148 000000E6 4159                    pop r9
   149 000000E8 4158                    pop r8
   150 000000EA 5E                      pop rsi
   151 000000EB 5F                      pop rdi
   152 000000EC 5A                      pop rdx
   153 000000ED 59                      pop rcx
   154 000000EE 5B                      pop rbx
   155 000000EF 5D                      pop rbp
   156 000000F0 C3                      ret 
