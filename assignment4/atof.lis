     1                                  ; name: Victor Mercado
     2                                  ; email: vmercado29@csu.fullerton.edu
     3                                  
     4                                  base_number equ 10                      ;10 base of the decimal number system
     5                                  ascii_zero equ 48                       ;48 is the ascii value of '0'
     6                                  null equ 0
     7                                  minus equ '-'
     8                                  decimal_point equ '.'
     9                                  
    10                                  ;Global declaration for linking files.
    11                                  global atof                          ;This makes atolong callable by functions outside of this file.
    12                                  
    13                                  segment .data                           ;Place initialized data here
    14                                     ;This segment is empy
    15                                  
    16                                  segment .bss                            ;Declare pointers to un-initialized space in this segment.
    17                                     ;This segment is empty
    18                                  
    19                                  ;==============================================================================================================================
    20                                  ;===== Begin the executable code here.
    21                                  ;==============================================================================================================================
    22                                  segment .text                           ;Place executable instructions in this segment.
    23                                  
    24                                  atof:                                ;Entry point.  Execution begins here.
    25                                  
    26                                  ;The next two instructions should be performed at the start of every assembly program.
    27 00000000 55                      push rbp                                ;This marks the start of a new stack frame belonging to this execution of this function.
    28 00000001 4889E5                  mov  rbp, rsp                           ;rbp holds the address of the start of this new stack frame.
    29                                  ;The following pushes are performed for safety of the data that may already be in the remaining GPRs.
    30                                  ;This backup process is especially important when this module is called by another asm module.  It is less important when called
    31                                  ;called from a C or C++ function.
    32 00000004 53                      push rbx
    33 00000005 51                      push rcx
    34 00000006 52                      push rdx
    35 00000007 57                      push rdi
    36 00000008 56                      push rsi
    37 00000009 4150                    push r8
    38 0000000B 4151                    push r9
    39 0000000D 4152                    push r10
    40 0000000F 4153                    push r11
    41 00000011 4154                    push r12
    42 00000013 4155                    push r13
    43 00000015 4156                    push r14
    44 00000017 4157                    push r15
    45 00000019 9C                      pushf
    46                                  
    47                                  ;Designate the purpose of selected registers: r8, r9, r10
    48 0000001A 4989F8                  mov r8, rdi                   ;Copy the pointer to char data to r8
    49 0000001D 41B900000000            mov r9, 0                     ;r9 = array index
    50 00000023 41BA00000000            mov r10, 0                    ;r10 = long integer; final answer will be here.
    51 00000029 66450F57FF              xorpd xmm15, xmm15 ; Final answer float
    52                                  
    53                                  ;The first byte in the array may be '+' or '-', which are valid numeric characters.
    54                                  ;We need to check for the presence of a leading sign.
    55 0000002E 4180382B                cmp byte [r8+1*0], '+'        ;Check for leading plus sign
    56 00000032 7508                    jne next_comparison
    57 00000034 41B901000000            mov r9, 1
    58 0000003A EB18                    jmp begin_loop
    59                                  
    60                                  next_comparison:
    61 0000003C 4180382D                cmp byte [r8+1*0], '-'        ;Check for leading minus sign
    62 00000040 7512                    jne begin_loop
    63                                  
    64 00000042 41B901000000            mov r9, 1
    65                                  
    66                                  ; '1235.23'
    67                                  ; 123523 -> integer -> cvtsi2sd into xmm register -> divide by 10 however many decimal places
    68                                  ; count 2 decimal places
    69 00000048 41BC00000000            mov r12, 0 ; num_decimal_places
    70 0000004E 41BD00000000            mov r13, 0 ; This represents if we already decimal place (flag: hit_decimal_place)
    71                                  begin_loop:
    72 00000054 43803C0800              cmp byte [r8+1*r9], null      ;Check the termination condition of the loop
    73 00000059 743A                    je loop_finished
    74                                  ; if we reach the decimal point
    75                                      ; check if equal
    76                                          ; move the index forward
    77                                          ; set hit_decimal_place = True
    78 0000005B 43803C082E              cmp byte [r8+1*r9], decimal_point
    79 00000060 741D                    je HasDecimalPoint
    80                                  
    81 00000062 B80A000000              mov rax, base_number
    82 00000067 49F7E2                  mul r10 ; rax = r10 * 10       mul rax,     r10, 1 on the second iteration
    83                                  ; r10 contains 12
    84                                  ; multiply 10 against 12 = 120
    85 0000006A 4989C2                  mov r10, rax ; second iteration r10 contains 1*10
    86                                  
    87                                  ;This is the instuction we want to perform: "add r10, byte [r8+1*r9]".  But the problem is that the
    88                                  ;sizes of operands do not match.  You cannot add a 1-byte number to an 8-byte number.  However, the
    89                                  ;problem can be fixed by using the extension instructions documented on page 77 of the Jorgensen textbook.
    90 0000006D 438A0408                mov al, byte [r8+1*r9]        ;The 1-byte number has been copied to al (1-byte register)
    91 00000071 6698                    cbw                           ;The 1-byte number in al has been extended to 2-byte number in ax
    92 00000073 98                      cwde                          ;The 2-byte number in ax has been extended to 4-byte number in eax
    93 00000074 4898                    cdqe                          ;The 4-byte number in eax has been extended to 8-byte number in rax
    94                                  
    95                                  ; current char is placed into rax
    96                                  ; 1234.45
    97                                  ; 1234(T)4
    98                                  ; 123445 decimal_place = 2
    99                                  ; '1' - ascii character - 1 + 48 = 49
   100                                  ; '2' - ascii character - 2 + 48
   101                                  ; subtract 48 from the ascii character to get the actual number
   102                                  ;Now addition is possible
   103 00000076 4901C2                  add r10, rax                  ;To students in 240 class: wasn't that simply great fun?
   104                                  ; 10 + 2 = 12
   105 00000079 4983EA30                sub r10, ascii_zero           ;A declared constant is compatible with various sizes of registers; explained in Jorgensen.
   106 0000007D EB06                    jmp OverHasDecimalPoint
   107                                  HasDecimalPoint:
   108                                  ; set decimal flag to true
   109 0000007F 41BD01000000            mov r13, 1
   110                                  
   111                                  OverHasDecimalPoint:
   112                                  ; check if flag: hit_decimal_place r13 is true
   113                                  ; increment decimal counter
   114 00000085 4983FD01                cmp r13, 1
   115 00000089 7402                    je IncrementDecimalCounter
   116 0000008B EB03                    jmp OverIncrementCounter
   117                                  IncrementDecimalCounter:
   118 0000008D 49FFC4                  inc r12
   119                                  OverIncrementCounter:
   120                                  
   121 00000090 49FFC1                  inc r9
   122 00000093 EBBF                    jmp begin_loop
   123                                  loop_finished:
   124                                  
   125                                  
   126                                  ; 123445 decimal_place = 2 
   127                                  
   128                                  ; TODO: Place 123445 into GPR
   129                                  
   130                                  ; TODO: Convert GPR to XMM register
   131 00000095 F24D0F2AFA              cvtsi2sd xmm15, r10
   132                                  
   133                                  ; TODO: Divide the XMM register the number of decimal places
   134                                  ; if r12 doesnt work use r15
   135 0000009A 4983EC01                sub r12, 1
   136                                  
   137 0000009E B80A000000              mov rax, 10
   138 000000A3 F24C0F2AF0              cvtsi2sd xmm14, rax
   139                                  ; run for loop by r12 times to divide by 10 for each decimal place
   140 000000A8 41BA00000000            mov r10, 0
   141                                  loop2: 
   142 000000AE 4D39E2                      cmp r10, r12
   143 000000B1 740A                        je endloop2
   144                                  
   145                                      ; divide by 10
   146                                      ; decrement r12
   147                                      ; check if r12 is 0
   148                                      ; if not, jump to loop2
   149                                      ; if 0, break
   150                                      ; divide by 10
   151 000000B3 F2450F5EFE                  divsd xmm15, xmm14
   152 000000B8 49FFC2                      inc r10
   153 000000BB EBF1                        jmp loop2
   154                                  
   155                                  endloop2:
   156                                  ; TODO: Return the answer in xmm0
   157                                  
   158                                  
   159                                  ;Set the computed value to negative if needed
   160 000000BD 4180382D                cmp byte [r8+1*0], minus      ;Check for leading minus sign
   161 000000C1 7503                    jne positive
   162 000000C3 49F7DA                  neg r10
   163                                  
   164                                  positive:
   165 000000C6 4C89D0                  mov rax, r10
   166 000000C9 F2410F10C7              movsd xmm0, xmm15
   167                                  ;==================================================================================================================================
   168                                  ;Epilogue: restore data to the values held before this function was called.
   169 000000CE 9D                      popf
   170 000000CF 415F                    pop r15
   171 000000D1 415E                    pop r14
   172 000000D3 415D                    pop r13
   173 000000D5 415C                    pop r12
   174 000000D7 415B                    pop r11
   175 000000D9 415A                    pop r10
   176 000000DB 4159                    pop r9
   177 000000DD 4158                    pop r8
   178 000000DF 5E                      pop rsi
   179 000000E0 5F                      pop rdi
   180 000000E1 5A                      pop rdx
   181 000000E2 59                      pop rcx
   182 000000E3 5B                      pop rbx
   183 000000E4 5D                      pop rbp                       ;Now the system stack is in the same state it was when this function began execution.
   184 000000E5 C3                      ret                           ;Pop a qword from the stack into rip, and continue executing..
